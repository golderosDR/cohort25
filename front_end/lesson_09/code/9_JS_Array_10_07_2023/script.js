const arr = [1, 2, 3, 'four', 'five'];
// typeof - ключевое слово, с помощью которого можно получить информацию о типе
// данных той или иной сущности
console.log(typeof arr);

// const - константа, которую нельзя переопределять!
// arr = true (Пример ошибки!!!)


// Метод push меняет исходный массив, добавляя к нему элементы, переданные в качестве параметров
// метода, возвращает новую длинну массива, 
console.log('==========push==========');
let res = arr.push(6, 7, 8);
// Возвращается новая длинна массива (равна 8)
console.log(res);
// Возвращается новый массив (равен [1, 2, 3, 'four', 'five', 6, 7, 8])
console.log(arr);

// Метод pop меняет исходный массив, удаляя последний элемент, возвращает удалённый элемент
console.log('==========pop==========');
res = arr.pop();
// Возвращает удалённый элемент (равен 8)
console.log(res);
// Возвращается новый массив (равен [1, 2, 3, 'four', 'five', 6, 7])
console.log(arr);

// Метод shift меняет исходный массив, удаляя первый элемент, возвращает удалённый элемент
console.log('==========shift==========');
res = arr.shift();
// Возвращает удалённый элемент (равен 1)
console.log(res);
// Возвращается новый массив (равен [2, 3, 'four', 'five', 6, 7])
console.log(arr);

// Метод unshift меняет исходный массив, добавляя элементы в начало массива,
// возвращает новую длину массива
console.log('==========unshift==========');
res = arr.unshift(0, 1);
// Возвращает новую длину массива (равен 8)
console.log(res);
// Возвращается новый массив (равен [0, 1, 2, 3, 'four', 'five', 6, 7])
console.log(arr);

// Метод concat не меняет исходные массивы
// Возвращает новый объединённый массив
console.log('==========concat==========');
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
res = arr1.concat(arr2);
console.log(res);
console.log(arr1);
console.log(arr2);

// Метод slice не меняет исходный массив
// возвращает новый массив
console.log('==========slice==========');
res = arr.slice(2, 6); // метод slice(start, finish) - где старт входит, а финиш не входит
// Возвращает новый массив (равен [2, 3, 'four', 'five']);
console.log(res);
// Исходный массив не изменился (равен [0, 1, 2, 3, 'four', 'five', 6, 7])
console.log(arr);

// Метод splice меняет исходный массив, вырезая элементы из исходного массива
// возвращает вырезанный кусок
console.log('==========splice==========');
res = arr.splice(1, 4); // метод splice(start, countElement) - где старт входит, а countElement - кол-во вырезаемых элементов
// Возвращает новый массив (равен [1, 2, 3, 'four']);
console.log(res);
// Исходный массив не изменился (равен [0, 'five', 6, 7])
console.log(arr);

console.log('=========spread=============');
const uniteArr = [...arr1, ...arr2];
console.log(arr1);
console.log(arr2);
// В 78-ой строке мы самым коротким способ получаем глубокую копию массива
// Оператор spread применим как к массивам, так и к объектам!
const arrCopy = [...arr];
console.log(arrCopy);
console.log(uniteArr);

console.log('===========================');
let x = 5;
let y = x;
console.log(x, y);
y = 6;
console.log(x, y);

console.log('===========================');
x = [5];
y = x;
console.log(x, y);
x.push(100);
console.log(x, y);
